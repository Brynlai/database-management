--=============================================================================
-- File: 03_queries_and_views.sql
--=============================================================================
-- Purpose: Creates reusable views to simplify data access and provides
--          examples of complex analytical queries for management.
--=============================================================================











--=============================================================================
-- Section 1: Foundational Views
--=============================================================================
-- These views abstract complex joins and provide a simplified, logical layer
-- for other developers and analysts to query against.

PROMPT Creating View: V_BOOKING_DETAILS
CREATE OR REPLACE VIEW V_BOOKING_DETAILS AS
SELECT
    b.booking_id,
    b.booking_date,
    m.member_id,
    m.name AS member_name,
    m.email AS member_email,
    t.ticket_id,
    t.seat_number,
    t.status AS ticket_status,
    s.schedule_id,
    s.departure_time,
    s.arrival_time,
    s.origin_station,
    s.destination_station,
    s.base_price,
    c.name AS company_name,
    p.promotion_id,
    p.promotion_name
FROM Booking b
JOIN Member m ON b.member_id = m.member_id
JOIN BookingDetails bd ON b.booking_id = bd.booking_id
JOIN Ticket t ON bd.ticket_id = t.ticket_id
JOIN Schedule s ON t.schedule_id = s.schedule_id
JOIN Bus bu ON s.bus_id = bu.bus_id
JOIN Company c ON bu.company_id = c.company_id
LEFT JOIN Promotion p ON t.promotion_id = p.promotion_id;

COMMENT ON TABLE V_BOOKING_DETAILS IS 'A comprehensive view combining booking, member, ticket, and schedule information for easy querying of all booking-related data.';


PROMPT Creating View: V_BUS_SCHEDULE_DETAILS
CREATE OR REPLACE VIEW V_BUS_SCHEDULE_DETAILS AS
SELECT
    s.schedule_id,
    s.departure_time,
    s.arrival_time,
    s.base_price,
    s.origin_station,
    s.destination_station,
    s.platform_no,
    b.bus_id,
    b.plate_number,
    b.capacity,
    c.company_id,
    c.name AS company_name
FROM Schedule s
JOIN Bus b ON s.bus_id = b.bus_id
JOIN Company c ON b.company_id = c.company_id;

COMMENT ON TABLE V_BUS_SCHEDULE_DETAILS IS 'A simplified view joining schedule, bus, and company details, ideal for searching and displaying trip information.';


--=============================================================================
-- Section 2: Analytical Queries for Management
--=============================================================================

PROMPT Creating View: V_STAFF_SERVICE_WORK
CREATE OR REPLACE VIEW V_STAFF_SERVICE_WORK AS
SELECT
    st.staff_id,
    st.role,
    st.name,
    sa.service_transaction_id,
    sd.actual_cost
FROM Staff st
JOIN StaffAllocation sa ON st.staff_id = sa.staff_id
JOIN ServiceDetails sd ON sa.service_transaction_id = sd.service_transaction_id;

COMMENT ON TABLE V_STAFF_SERVICE_WORK IS 'View mapping staff to their service tasks and costs, used for operational performance reporting.';












--=============================================================================
-- Query 1: Monthly Revenue Summary by Bus Company (Strategic Level)
--=============================================================================
-- Purpose: Provides a high-level overview of revenue generated by each bus
--          company, aggregated by month. This helps strategic management
--          assess partner performance and financial trends.

PROMPT Running Query: Monthly Revenue by Company (Formatted Report)

-- Setup for the report format
SET LINESIZE 100
SET PAGESIZE 200
TTITLE CENTER 'Monthly Revenue Report by Bus Company' SKIP 2

-- Define column formats for clean output
COLUMN booking_month FORMAT A10 HEADING 'Month'
COLUMN company_name  FORMAT A35 HEADING 'Bus Company'
COLUMN total_revenue FORMAT 999,999,990.00 HEADING 'Total Revenue (RM)'
COLUMN ticket_count  FORMAT 999,999 HEADING 'Tickets Sold'

-- Group the report by month and compute monthly subtotals
BREAK ON booking_month SKIP 1
COMPUTE SUM LABEL 'Total:' OF total_revenue ON booking_month

-- The actual query
SELECT
    TO_CHAR(vb.booking_date, 'YYYY-MM') AS booking_month,
    vb.company_name,
    SUM(vb.base_price) AS total_revenue,
    COUNT(vb.ticket_id) AS ticket_count
FROM V_BOOKING_DETAILS vb
WHERE vb.ticket_status = 'Booked'
GROUP BY
    TO_CHAR(vb.booking_date, 'YYYY-MM'),
    vb.company_name
ORDER BY
    booking_month DESC,
    total_revenue DESC;

-- Clean up formatting settings to not affect subsequent queries
CLEAR COLUMNS;
CLEAR BREAKS;
CLEAR COMPUTES;
TTITLE OFF;
















--=============================================================================
-- Query 2: Staff Performance on Service Tasks (Operational Level)
--=============================================================================
-- Purpose: Measures the productivity of maintenance staff by counting the
--          number of service tasks completed and the total cost of those
--          services. This is useful for operational managers to evaluate
--          workload and performance.

PROMPT Running Query: Staff Service Performance (Formatted Report)

-- Setup for the report format
SET LINESIZE 120
SET PAGESIZE 200
TTITLE CENTER 'Staff Service Performance Report' SKIP 2

-- Define column formats for clean output
COLUMN staff_role         FORMAT A15 HEADING 'Staff Role'
COLUMN staff_name         FORMAT A30 HEADING 'Staff Name'
COLUMN tasks_completed    FORMAT 999,990 HEADING 'Tasks|Completed'
COLUMN total_service_cost FORMAT 999,999,990.00 HEADING 'Total Cost of Services (RM)'

-- Group the report by role for readability
BREAK ON staff_role SKIP 1

-- The actual query
SELECT
    v.role AS staff_role,
    v.name AS staff_name,
    COUNT(v.service_transaction_id) AS tasks_completed,
    SUM(v.actual_cost) AS total_service_cost
FROM V_STAFF_SERVICE_WORK v
WHERE v.role IN ('Technician', 'Cleaner')
GROUP BY
    v.role,
    v.staff_id,
    v.name
ORDER BY
    v.role,
    tasks_completed DESC;

-- Clean up formatting settings to not affect subsequent queries
CLEAR COLUMNS;
CLEAR BREAKS;
TTITLE OFF;

COMMIT;